% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input_code_editor.R
\name{update_code_editor}
\alias{update_code_editor}
\title{Update a code editor from the server}
\usage{
update_code_editor(
  id,
  code = NULL,
  ...,
  language = NULL,
  theme_light = NULL,
  theme_dark = NULL,
  read_only = NULL,
  line_numbers = NULL,
  word_wrap = NULL,
  tab_size = NULL,
  indentation = NULL,
  session = shiny::getDefaultReactiveDomain()
)
}
\arguments{
\item{id}{The input ID of the editor to update.}

\item{code}{New code content. If \code{NULL}, the code is not changed.}

\item{...}{Reserved for future use. Must be named arguments.}

\item{language}{New programming language. If \code{NULL}, the language is not changed.
See \code{\link[=input_code_editor]{input_code_editor()}} for supported languages.}

\item{theme_light}{New light theme. If \code{NULL}, the theme is not changed.
See \code{\link[=code_editor_themes]{code_editor_themes()}} for available themes.}

\item{theme_dark}{New dark theme. If \code{NULL}, the theme is not changed.
See \code{\link[=code_editor_themes]{code_editor_themes()}} for available themes.}

\item{read_only}{New read-only state. If \code{NULL}, the state is not changed.}

\item{line_numbers}{New line numbers setting. If \code{NULL}, the setting is not changed.}

\item{word_wrap}{New word wrap setting. If \code{NULL}, the setting is not changed.}

\item{tab_size}{New tab size. If \code{NULL}, the size is not changed.}

\item{indentation}{New indentation type: \code{"space"} or \code{"tab"}. If \code{NULL}, the
type is not changed.}

\item{session}{The Shiny session object. Defaults to the current session.}
}
\value{
Called for its side effect of updating the editor. Invisibly returns \code{NULL}.
}
\description{
Update the code, language, themes, or other options of a code editor from the
server side.
}
\examples{
\dontrun{
library(shiny)

ui <- fluidPage(
  actionButton("change_lang", "Switch to Python"),
  input_code_editor(
    "code",
    code = "SELECT * FROM table",
    language = "sql"
  )
)

server <- function(input, output, session) {
  observeEvent(input$change_lang, {
    update_code_editor(
      "code",
      code = "print('Hello, world!')",
      language = "python"
    )
  })
}

shinyApp(ui, server)
}

}
\seealso{
\code{\link[=input_code_editor]{input_code_editor()}}
}

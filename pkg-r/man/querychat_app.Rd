% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/querychat_app.R
\name{querychat_app}
\alias{querychat_app}
\title{A Simple App for Chatting with Data}
\usage{
querychat_app(config, ..., bookmark_store = "url")
}
\arguments{
\item{config}{A \code{querychat_config} object or a data source that can be used
to create one.}

\item{...}{Additional arguments passed to \code{\link[=querychat_init]{querychat_init()}} if \code{config} is
not already a \code{querychat_config} object.}

\item{bookmark_store}{The bookmarking store to use for the app. Passed to
\code{enable_bookmarking} in \code{\link[shiny:shinyApp]{shiny::shinyApp()}}. Defaults to \code{"url"}, which
uses the URL to store the chat state. URL-based bookmarking is limited in
size; use \code{"server"} to store the state on the server side without size
limitations; or disable bookmarking by setting this to \code{"disable"}.}
}
\value{
Invisibly returns the \code{chat} object containing the chat history.
}
\description{
Creates a Shiny app that allows users to interact with a data source using
natural language queries. The app uses a pre-configured Shiny app built on
\code{\link[=querychat_sidebar]{querychat_sidebar()}} and \code{\link[=querychat_server]{querychat_server()}} to provide a quick-and-easy
way to chat with your data.
}
\examples{
\dontshow{if (rlang::is_interactive()) withAutoprint(\{ # examplesIf}
# Pass in a data frame to start querychatting
querychat_app(mtcars)

# Or choose your LLM client using ellmer::chat_*() functions
querychat_app(mtcars, client = ellmer::chat_anthropic())
\dontshow{\}) # examplesIf}
}

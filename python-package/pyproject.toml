[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "querychat"
version = "0.1.0"
description = "Chat with your data using natural language"
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
authors = [{ name = "Posit", email = "info@posit.co" }]
dependencies = [
    "duckdb",
    "pandas",
    "shiny",
    "shinywidgets",
    "htmltools",
    "chatlas",
    "narwhals",
]

[project.urls]
Homepage = "https://github.com/posit-dev/querychat"
Issues = "https://github.com/posit-dev/querychat/issues"

[tool.hatch.build.targets.wheel]
packages = ["querychat"]

[tool.hatch.build.targets.sdist]
include = ["querychat", "LICENSE", "README.md"]

[tool.uv]
dev-dependencies = ["ruff>=0.6.5", "pyright>=1.1.401"]

[tool.ruff]
src = ["querychat"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "app.py",             # ignore examples for now
]

line-length = 88
indent-width = 4

target-version = "py39"

# [tool.ruff.lint]
# select = ['E', 'F', 'W', 'A', 'PLC', 'PLE', 'PLW', 'I']
[tool.ruff.lint]
extend-ignore = [
    "E501",   # Line too long
    "ISC001", # single-line-implicit-string-concatenation
    "ISC002", # multi-line-implicit-string-concatenation
    "ARG001", # Unused argument
    "A002",   # Shadowing a built-in
    "D200",   # One-line docstring should fit on one line with quotes
    "D203",   # 1 blank line required before class docstring
    "D212",   # Multi-line docstring summary should start at the first line
    "RET504", # Unnecessary assignment to `{name}` before `return` statement
    "RET505", # Unnecessary branch after `return` statement
    # TODO: Remove in the future, when we have docstrings.
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    "D205", # 1 blank line required between summary line and description
]
extend-select = [
    # "C90", # C90; mccabe: https://docs.astral.sh/ruff/rules/complex-structure/
    "DTZ", # Dates with timezones are different from dates without timezones # DTZ; flake8-datetimez: https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz

    # flake8-builtins
    # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    #
    # Check for builtin shadowing (i.e., naming a variable 'for', which is a builtin.)
    "A",

    # pydocstyle
    # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    # https://docs.astral.sh/ruff/faq/#does-ruff-support-numpy-or-google-style-docstrings
    #
    # Check docstring formatting. Many of these rules are intentionally ignored below.
    "D",

    "ASYNC", # ASYNC; flake8-async: https://docs.astral.sh/ruff/rules/#flake8-async-async


    "E",      # E; pycodestyle: https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "F",      # F; Pyflakes: https://docs.astral.sh/ruff/rules/#pyflakes-f
    "I",      # I; isort: https://docs.astral.sh/ruff/rules/#isort-i
    "B",      # B; flake8-bugbear: https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "Q",      # Q; flake8-quotes: https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "COM",    # COM; Commas: https://docs.astral.sh/ruff/rules/#flake8-commas-com
    "C4",     # C4; flake8-comprehensions: https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "FA",     # FA; flake8-future-annotations: https://docs.astral.sh/ruff/rules/#flake8-future-annotations-fa
    "ISC",    # ISC; flake8-implicit-str-concat: https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "ICN",    # ICN; flake8-import-conventions: https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
    "PIE",    # PIE; flake8-pie: https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "PYI",    # PYI; flake8-pyi : https://docs.astral.sh/ruff/rules/#flake8-pyi-pyi
    "PT",     # PT; flake8-pytest-style: https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "RET",    # RET; flake8-return: https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "SIM",    # SIM; flake8-simplify: https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "TID253", # banned-module-level-imports: https://docs.astral.sh/ruff/rules/banned-module-level-imports/#banned-module-level-imports-tid253
    "T10",    # T10; flake8-dbugger: https://docs.astral.sh/ruff/rules/#flake8-debugger-t10
    "TC",     # TC; flake8-type-checking: https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "ARG",    # ARG; flake8-argparse: https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "PTH",    # PTH; flake8-use-pathlib: https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    # "FIX", # FIX; flake8-fixme: https://docs.astral.sh/ruff/rules/#flake8-fixme-fix
    # "PGH", # PGH; pygrep-hooks: https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
    "NPY",    # NPY; NumPy-specific rules: https://docs.astral.sh/ruff/rules/#numpy-specific-rules-npy
    "RUF005", # RUF005; Ruff specific rules Consider {expression} instead of concatenation: https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "RUF100", # RUF100; Ruff specific rules Unused `noqa` directive https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.pyright]
include = ["querychat"]
# exclude = ["examples", ".venv"]

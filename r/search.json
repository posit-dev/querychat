[{"path":"https://posit-dev.github.io/querychat/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joe Cheng. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://posit-dev.github.io/querychat/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheng J (2025). querychat: Filter Query Data Frames 'shiny' Using LLM Chat Interface. R package version 0.0.0.9000, https://posit-dev.github.io/querychat/pkg-r.","code":"@Manual{,   title = {querychat: Filter and Query Data Frames in 'shiny' Using an LLM Chat Interface},   author = {Joe Cheng},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://posit-dev.github.io/querychat/pkg-r}, }"},{"path":"https://posit-dev.github.io/querychat/index.html","id":"querychat-chat-with-shiny-apps-r","dir":"","previous_headings":"","what":"Filter and Query Data Frames in shiny Using an LLM Chat Interface","title":"Filter and Query Data Frames in shiny Using an LLM Chat Interface","text":"Imagine typing questions like directly Shiny dashboard, seeing results realtime: ‚ÄúShow penguins species Gentoo bill length greater 50mm.‚Äù ‚ÄúShow blue states incidence rate greater 100 per 100,000 people.‚Äù ‚Äúaverage mpg cars 6 cylinders?‚Äù querychat drop-component Shiny allows users query data frame using natural language. results available reactive data frame, can easily used Shiny outputs, reactive expressions, downloads, etc. terrible idea might think! need careful bringing LLMs data analysis, know prone hallucinations classes errors. querychat designed excel reliability, transparency, reproducibility using one technique: denying raw access data, forcing write SQL queries instead. See section ‚Äúworks‚Äù .","code":""},{"path":"https://posit-dev.github.io/querychat/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Filter and Query Data Frames in shiny Using an LLM Chat Interface","text":"","code":"pak::pak(\"posit-dev/querychat/pkg-r\")"},{"path":"https://posit-dev.github.io/querychat/index.html","id":"how-to-use","dir":"","previous_headings":"","what":"How to use","title":"Filter and Query Data Frames in shiny Using an LLM Chat Interface","text":"First, ‚Äôll need OpenAI API key. See instructions Ellmer. (use different LLM provider, see .) ‚Äôs minimal example shows three function calls need make.","code":"library(shiny) library(bslib) library(querychat)  # 1. Configure querychat. This is where you specify the dataset and can also #    override options like the greeting message, system prompt, model, etc. querychat_config <- querychat_init(mtcars)  ui <- page_sidebar(   # 2. Use querychat_sidebar(id) in a bslib::page_sidebar.   #    Alternatively, use querychat_ui(id) elsewhere if you don't want your   #    chat interface to live in a sidebar.   sidebar = querychat_sidebar(\"chat\"),   DT::DTOutput(\"dt\") )  server <- function(input, output, session) {    # 3. Create a querychat object using the config from step 1.   querychat <- querychat_server(\"chat\", querychat_config)    output$dt <- DT::renderDT({     # 4. Use the filtered/sorted data frame anywhere you wish, via the     #    querychat$df() reactive.     DT::datatable(querychat$df())   }) }  shinyApp(ui, server)"},{"path":[]},{"path":"https://posit-dev.github.io/querychat/index.html","id":"powered-by-llms","dir":"","previous_headings":"How it works","what":"Powered by LLMs","title":"Filter and Query Data Frames in shiny Using an LLM Chat Interface","text":"querychat‚Äôs natural language chat experience powered LLMs. may use model ellmer supports ability tool calls, currently recommend (March 2025): GPT-4o Claude 3.5 Sonnet Claude 3.7 Sonnet testing, ‚Äôve found models strike good balance accuracy latency. Smaller models like GPT-4o-mini fine simple queries make surprising mistakes moderately complex ones; reasoning models like o3-mini slow responses without providing meaningfully better results. small open source models (8B ) ‚Äôve tested fared extremely poorly. Sorry. ü§∑","code":""},{"path":"https://posit-dev.github.io/querychat/index.html","id":"powered-by-sql","dir":"","previous_headings":"How it works","what":"Powered by SQL","title":"Filter and Query Data Frames in shiny Using an LLM Chat Interface","text":"querychat direct access raw data; can read filter data writing SQL SELECT statements. crucial ensuring relability, transparency, reproducibility: Reliability: Today‚Äôs LLMs excellent writing SQL, bad direct calculation. Transparency: querychat always displays SQL user, can vetted instead blindly trusted. Reproducibility: SQL query can easily copied reused. Currently, querychat uses DuckDB SQL engine. ‚Äôs extremely fast surprising number statistical functions.","code":""},{"path":[]},{"path":"https://posit-dev.github.io/querychat/index.html","id":"provide-a-greeting-recommended","dir":"","previous_headings":"Customizing querychat","what":"Provide a greeting (recommended)","title":"Filter and Query Data Frames in shiny Using an LLM Chat Interface","text":"querychat UI first appears, usually want greet user basic instructions. default, instructions auto-generated every time user arrives; slow, wasteful, unpredictable. Instead, create file called greeting.md, calling querychat_init, pass greeting = readLines(\"greeting.md\"). can provide suggestions user using <span class=\"suggestion\"> <\/span> tag. example: suggestions appear greeting automatically populate chat text box clicked. gives user ideas explore . need help coming greeting, app can help ! Just launch paste chat interface: Help create greeting future users. Include example questions. Format suggested greeting Markdown, code block. keep giving feedback ‚Äôre happy result, ready pasted greeting.md. Alternatively, can completely suppress greeting passing greeting = \"\".","code":"* **Filter and sort the data:**   * <span class=\"suggestion\">Show only survivors<\/span>   * <span class=\"suggestion\">Filter to first class passengers under 30<\/span>   * <span class=\"suggestion\">Sort by fare from highest to lowest<\/span>  * **Answer questions about the data:**   * <span class=\"suggestion\">What was the survival rate by gender?<\/span>   * <span class=\"suggestion\">What's the average age of children who survived?<\/span>   * <span class=\"suggestion\">How many passengers were traveling alone?<\/span>"},{"path":"https://posit-dev.github.io/querychat/index.html","id":"augment-the-system-prompt-recommended","dir":"","previous_headings":"Customizing querychat","what":"Augment the system prompt (recommended)","title":"Filter and Query Data Frames in shiny Using an LLM Chat Interface","text":"LLM parlance, system prompt set instructions specific knowledge want model use conversation. querychat automatically creates system prompt comprised : basic set behaviors LLM must follow order querychat work properly. (See inst/prompt/prompt.md ‚Äôre curious looks like.) SQL schema data frame provided. (Optional) additional description data choose provide. (Optional) additional instructions want use guide querychat‚Äôs behavior.","code":""},{"path":"https://posit-dev.github.io/querychat/index.html","id":"data-description","dir":"","previous_headings":"Customizing querychat > Augment the system prompt (recommended)","what":"Data description","title":"Filter and Query Data Frames in shiny Using an LLM Chat Interface","text":"give querychat dataset nothing else, provide LLM basic schema data: Column names DuckDB data type (integer, float, boolean, datetime, text) text columns less 10 unique values, assume categorical variables include list values integer float columns, include range ‚Äôs LLM know data. actual data get passed LLM. calculate values pass schema information LLM. column names usefully descriptive, may able make surprising amount sense data. data frame‚Äôs columns x, V1, value, etc., model need given background info‚Äìjust like human . provide information, use data_description argument. example, mtcars data frame used example pretty minimal column names. might create data_description.md like : can pass via: querychat doesn‚Äôt need information particular format; just put whatever information, whatever format, think human find helpful.","code":"The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973‚Äì74 models).  - mpg:  Miles/(US) gallon - cyl:  Number of cylinders - disp: Displacement (cu.in.) - hp:   Gross horsepower - drat: Rear axle ratio - wt:   Weight (1000 lbs) - qsec: 1/4 mile time - vs:   Engine (0 = V-shaped, 1 = straight) - am:   Transmission (0 = automatic, 1 = manual) - gear: Number of forward gears - carb: Number of carburetors querychat_config <- querychat_init(   mtcars,   data_description = readLines(\"data_description.md\") )"},{"path":"https://posit-dev.github.io/querychat/index.html","id":"additional-instructions","dir":"","previous_headings":"Customizing querychat > Augment the system prompt (recommended)","what":"Additional instructions","title":"Filter and Query Data Frames in shiny Using an LLM Chat Interface","text":"can add additional instructions end system prompt, passing extra_instructions query_init. can also put instructions separate file use readLines() load , data_description . Warning: 100% guaranteed LLM always‚Äîmany cases, ever‚Äîobey instructions, can difficult predict instructions problem. sure test extensively time change instructions, especially, change model use.","code":"querychat_config <- querychat_init(mtcars, extra_instructions = c(     \"You're speaking to a British audience--please use appropriate spelling conventions.\",     \"Use lots of emojis! üòÉ Emojis everywhere, üåç emojis forever. ‚ôæÔ∏è\",     \"Stay on topic, only talk about the data dashboard and refuse to answer other questions.\" ))"},{"path":"https://posit-dev.github.io/querychat/index.html","id":"use-a-different-llm-provider","dir":"","previous_headings":"Customizing querychat","what":"Use a different LLM provider","title":"Filter and Query Data Frames in shiny Using an LLM Chat Interface","text":"default, querychat uses GPT-4o via OpenAI API. want use different model, can provide create_chat_func function takes system_prompt parameter, returns Ellmer chat object. convenient way purrr::partial: use Claude 3.7 Sonnet instead, require provide API key. See instructions Ellmer information authenticate different providers.","code":"library(ellmer)  # Option 1: Define a function my_chat_func <- function(system_prompt) {   return(     chat_claude(       model=\"claude-3-7-sonnet-latest\",       system_prompt=system_prompt     )   ) } library(ellmer) library(purrr)  # Option 2: Use partial querychat_config <- querychat_init(mtcars,   create_chat_func = purrr::partial(ellmer::chat_claude, model = \"claude-3-7-sonnet-latest\") )"},{"path":"https://posit-dev.github.io/querychat/reference/querychat_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Call this once outside of any server function ‚Äî querychat_init","title":"Call this once outside of any server function ‚Äî querychat_init","text":"perform one-time initialization can shared Shiny sessions R process.","code":""},{"path":"https://posit-dev.github.io/querychat/reference/querychat_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call this once outside of any server function ‚Äî querychat_init","text":"","code":"querychat_init(   df,   tbl_name = deparse(substitute(df)),   greeting = NULL,   data_description = NULL,   extra_instructions = NULL,   create_chat_func = purrr::partial(ellmer::chat_openai, model = \"gpt-4o\"),   system_prompt = querychat_system_prompt(df, tbl_name, data_description =     data_description, extra_instructions = extra_instructions) )"},{"path":"https://posit-dev.github.io/querychat/reference/querychat_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call this once outside of any server function ‚Äî querychat_init","text":"df data frame. tbl_name string containing valid table name data frame, appear SQL queries. Ensure begins letter, contains letters, numbers, underscores. default, querychat try infer table name using name df argument. greeting string Markdown format, containing initial message display user upon first loading chatbot. provided, LLM invoked start conversation generate one. data_description string plain text Markdown format, containing description data frame additional context might helpful understanding data. included system prompt chat model. system_prompt argument provided, data_description argument ignored. extra_instructions string plain text Markdown format, containing additional instructions chat model. appended end system prompt. system_prompt argument provided, extra_instructions argument ignored. create_chat_func function takes system prompt returns chat object. default uses ellmer::chat_openai(). system_prompt string containing system prompt chat model. default uses querychat_system_prompt() generate generic prompt, can enhance via data_description extra_instructions arguments.","code":""},{"path":"https://posit-dev.github.io/querychat/reference/querychat_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call this once outside of any server function ‚Äî querychat_init","text":"object can passed querychat_server() querychat_config argument. convention, object named querychat_config.","code":""},{"path":"https://posit-dev.github.io/querychat/reference/querychat_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Initalize the querychat server ‚Äî querychat_server","title":"Initalize the querychat server ‚Äî querychat_server","text":"Initalize querychat server","code":""},{"path":"https://posit-dev.github.io/querychat/reference/querychat_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initalize the querychat server ‚Äî querychat_server","text":"","code":"querychat_server(id, querychat_config)"},{"path":"https://posit-dev.github.io/querychat/reference/querychat_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initalize the querychat server ‚Äî querychat_server","text":"id ID module instance. Must match ID passed corresponding call querychat_ui(). querychat_config object created querychat_init().","code":""},{"path":"https://posit-dev.github.io/querychat/reference/querychat_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initalize the querychat server ‚Äî querychat_server","text":"querychat instance, named list following elements: sql: reactive returns current SQL query. title: reactive returns current title. df: reactive returns data frame, filtered sorted current SQL query. chat: ellmer::Chat object powers chat interface. convention, object named querychat_config.","code":""},{"path":"https://posit-dev.github.io/querychat/reference/querychat_system_prompt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a system prompt for the chat model ‚Äî querychat_system_prompt","title":"Create a system prompt for the chat model ‚Äî querychat_system_prompt","text":"function generates system prompt chat model based data frame's schema optional additional context instructions.","code":""},{"path":"https://posit-dev.github.io/querychat/reference/querychat_system_prompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a system prompt for the chat model ‚Äî querychat_system_prompt","text":"","code":"querychat_system_prompt(   df,   name,   data_description = NULL,   extra_instructions = NULL,   categorical_threshold = 10 )"},{"path":"https://posit-dev.github.io/querychat/reference/querychat_system_prompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a system prompt for the chat model ‚Äî querychat_system_prompt","text":"df data frame generate schema information . name string containing name table SQL queries. data_description Optional description data, plain text Markdown format. extra_instructions Optional additional instructions chat model, plain text Markdown format. categorical_threshold maximum number unique values text column considered categorical.","code":""},{"path":"https://posit-dev.github.io/querychat/reference/querychat_system_prompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a system prompt for the chat model ‚Äî querychat_system_prompt","text":"string containing system prompt chat model.","code":""},{"path":"https://posit-dev.github.io/querychat/reference/querychat_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI components for querychat ‚Äî querychat_ui","title":"UI components for querychat ‚Äî querychat_ui","text":"functions create UI components querychat interface. querychat_ui creates basic chat interface, querychat_sidebar wraps chat interface bslib::sidebar component designed used sidebar argument bslib::page_sidebar.","code":""},{"path":"https://posit-dev.github.io/querychat/reference/querychat_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI components for querychat ‚Äî querychat_ui","text":"","code":"querychat_sidebar(id, width = 400, height = \"100%\", ...)  querychat_ui(id)"},{"path":"https://posit-dev.github.io/querychat/reference/querychat_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UI components for querychat ‚Äî querychat_ui","text":"id ID module instance. width width sidebar (using querychat_sidebar). height height sidebar (using querychat_sidebar). ... Additional arguments passed bslib::sidebar (using querychat_sidebar).","code":""},{"path":"https://posit-dev.github.io/querychat/reference/querychat_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UI components for querychat ‚Äî querychat_ui","text":"UI object can embedded Shiny app.","code":""}]

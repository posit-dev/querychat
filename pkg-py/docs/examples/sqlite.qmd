---
title: "SQLite"
---

This example and walkthrough has the following features:

- querychat interaction with a SQLite database using SQLAlchemy
- Reads in a data description file
- Reads in a greeting file

## Data

This example uses the `seaborn` library to load up the `titanic` dataset,
and then write the dataframe into a SQLite database, `titanic.db`.
It then uses SQLAlchemy to connect to the SQLite database.

If the `titanic.db` file does not exist in the same directory as the `app.py` file,
it will create the SQLite database file.


## Greeting file

Save this file as `greeting.md`:

```markdown
{{< include /../examples/greeting.md >}}
```

## Data description file

Save this file as `data_description.md`:

```markdown
{{< include /../examples/data_description.md >}}
```

## The application

Our application will read the the `greeting.md` and `data_description.md` files
and pass them along to the `querychat.init()` function.
Also, instead of passing in a dataframe object to the `data_source` parameter in `querychat.init()`, we pass in the database connection, along with the table in the database as `table_name`.

Here is our SQLite example app, save the contents to `app.py`.

{{< include /includes/github_models-callout.qmd >}}

```python
{{< include /../examples/app-database-sqlite.py >}}
```
